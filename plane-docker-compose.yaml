x-db-env: &db-env
  PGHOST: postgres_db
  PGDATABASE: 
  POSTGRES_USER: dragon
  POSTGRES_PASSWORD: <placeholder>
  POSTGRES_DB: plane
  POSTGRES_PORT: 5432
  PGDATA: /var/lib/postgresql/data

x-redis-env: &redis-env
  REDIS_HOST: cache_redis
  REDIS_PORT: 6379
  REDIS_URL: redis://cache_redis:6379

x-minio-env: &minio-env
  MINIO_ROOT_USER: 
  MINIO_ROOT_PASSWORD: 

x-aws-s3-env: &aws-s3-env
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY_ID: <placeholder>
  AWS_SECRET_ACCESS_KEY: <placeholder>
  AWS_S3_ENDPOINT_URL: <placeholder>
  AWS_S3_BUCKET_NAME: <placeholder>

x-proxy-env: &proxy-env
  NGINX_PORT: 80
  BUCKET_NAME: 
  FILE_SIZE_LIMIT: 5242880

x-mq-env: &mq-env # RabbitMQ Settings
  RABBITMQ_HOST: plane-mq
  RABBITMQ_PORT: 5672
  RABBITMQ_DEFAULT_USER: dragon
  RABBITMQ_DEFAULT_PASS: jMNP2D5o4gZKwT1t
  RABBITMQ_DEFAULT_VHOST: plane
  RABBITMQ_VHOST: plane

x-live-env: &live-env
  API_BASE_URL: http://api:8000

x-app-env: &app-env
  WEB_URL: https://plane.thinkiing.com
  DEBUG: 0
  SENTRY_DSN: ${SENTRY_DSN}
  SENTRY_ENVIRONMENT: production
  CORS_ALLOWED_ORIGINS: https://plane.thinkiing.com
  GUNICORN_WORKERS: 1
  USE_MINIO: 0
  DATABASE_URL: 
  SECRET_KEY: 60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5
  AMQP_URL: amqp://dragon:jMNP2D5o4gZKwT1t@plane-mq:5672/plane

services:
  web:
    container_name: plane_web
    image: makeplane/plane-frontend:stable
    command: node web/server.js web
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - worker
    networks:
      - main_network
      
  space:
    container_name: plane_space
    image: makeplane/plane-space:stable
    command: node space/server.js space
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - worker
      - web
    networks:
      - main_network
      
  admin:
    container_name: plane_admin
    image: makeplane/plane-admin:stable
    command: node admin/server.js admin
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - web
    networks:
      - main_network
      
  live:
    container_name: plane_live
    image: makeplane/plane-live:stable
    command: node live/dist/server.js live
    environment:
      <<: [*live-env, *redis-env]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - api
      - web
    networks:
      - main_network
      
  api:
    container_name: plane_api
    image: makeplane/plane-backend:stable
    command: ./bin/docker-entrypoint-api.sh
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - logs_api:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - plane-mq
    networks:
      - main_network
      
  worker:
    container_name: plane_worker
    image: makeplane/plane-backend:stable
    command: ./bin/docker-entrypoint-worker.sh
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - logs_worker:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - api
      - plane-mq
    networks:
      - main_network
      
  beat-worker:
    container_name: plane_beat_worker
    image: makeplane/plane-backend:stable
    command: ./bin/docker-entrypoint-beat.sh
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - logs_beat-worker:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - api
      - plane-mq
    networks:
      - main_network
      
  migrator:
    container_name: plane_migrator
    image: makeplane/plane-backend:stable
    command: ./bin/docker-entrypoint-migrator.sh
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - logs_migrator:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    networks:
      - main_network

  plane-mq:
    container_name: plane_mq
    image: rabbitmq:3.13.6-management-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      <<: *mq-env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - main_network

  # proxy:
  #   container_name: plane_proxy
  #   image: makeplane/plane-proxy:stable
  #   ports:
  #     - target: 80
  #       published: ${NGINX_PORT:-80}
  #       protocol: tcp
  #       mode: host     
  #   environment:
  #     <<: *proxy-env
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   depends_on:
  #     - web
  #     - api
  #     - space
  #   networks:
  #     - main_network
      
volumes:
  logs_api:
  logs_worker:
  logs_beat-worker:
  logs_migrator:
  rabbitmq_data:

networks:
  main_network:
    external: true
